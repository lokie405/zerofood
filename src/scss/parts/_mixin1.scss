@use "sass:string";
@use "sass:math";

// padding: calc(20px + (50 - 20) * ((100vw - 320px) / (1200 - 320)));

$minVP: 320;  // Minimal resurrection
$minRespVP: 768;  // Minimal resurrection for same item
$maxRespVP: 1920;  // Model resurrection
$minRespVP_px: #{$minRespVP + px};
$maxRespVP_px: #{$maxRespVP + px};

// =================================================================================
// ====/ R E S P O N S I V E /======================================================
// 
//   padding: calc(20px + (50 - 20) * ((100vw - 320px) / (1200 - 320)));}
// ====/ Convert measure from max ($maxVar) to min($minVar) value /================================
@function resp_768($maxVar, $minVar, $R: 768) {
    @return calc(#{$minVar + px} + ($maxVar - $minVar) * ((min(max(#{$R + px}, 100vw), $maxRespVP_px) - #{$R + px}) / ($maxRespVP - $R)));
}
@function resp_480($maxVar, $minVar, $R: 480) {
    @return calc(#{$minVar + px} + ($maxVar - $minVar) * ((min(max(#{$R + px}, 100vw), $maxRespVP_px) - #{$R + px}) / ($maxRespVP - $R)));
}
@function resp_320($maxVar, $minVar, $R: 320) {
    @return calc(#{$minVar + px} + ($maxVar - $minVar) * ((min(max(#{$R + px}, 100vw), $maxRespVP_px) - #{$R + px}) / ($maxRespVP - $R)));
}
@function resp($maxVar, $minVar, $R_max, $R_min) {
    // @return calc(#{$minVar + px} + ($maxVar - $minVar) * ((min(max(#{$R_min + px}, 100vw), #{$maxRespVP + px}) - #{$R_min + px}) / ($maxRespVP - $R_min)));
   @return resp_from_to($maxVar, $minVar, $R_max ,$R_min);
}
@function resp_from_to($maxVar, $minVar, $R_max: $maxRespVP , $R_min: $minRespVP ) {
    @return calc(#{$minVar + px} + ($maxVar - $minVar) * ((min(max(#{$R_min + px}, 100vw), #{$R_max + px}) - #{$R_min + px}) / ($R_max - $R_min)));
}
// ====/ Set font-size and line-height with responsive from max($fz) to min($minFz) /====================

@mixin fontAndLH($fz, $minFz, $lh: 0, $R_max: $maxRespVP, $R_min: $minRespVP) {
    @include font_and_lh($fz, $minFz, $lh, $R_max, $R_min);
}
@mixin fontAndLH_768($fz, $minFz, $lh: 0, $R_max: $maxRespVP, $R_min: 768) {
    @include font_and_lh($fz, $minFz, $lh, $R_max, $R_min);
}
@mixin fontAndLH_480($fz, $minFz, $lh: 0, $R_max: $maxRespVP, $R_min: 480) {
    @include font_and_lh($fz, $minFz, $lh, $R_max, $R_min);
}
@mixin fontAndLH_320($fz, $minFz, $lh: 0, $R_max: $maxRespVP, $R_min: 320) {
    @include font_and_lh($fz, $minFz, $lh, $R_min);
}
@mixin font_and_lh($_max, $_min, $_lh: 0, $R_max, $R_min) {
    $resp: resp($_max, $_min, $R_max, $R_min);
    font-size: $resp;
    @if($_lh != 0) {
        @if(string.index(#{$_lh}, "%") == null) {
            $coef: calc($_max / $_lh);
            line-height: calc($resp / $coef);
        }
        @else {
            $coef: calc(stringToNumber(string.slice(#{$_lh}, 0, -2)) / 100);
            line-height: calc($resp * $coef);
        }
    }
    @else {
        line-height: unset;
    }
}

// ====/ Set responsive side to rectangle from:=========================================================
// ====/ $width -> $minWidth and $height -> $minHeight /===============================================
@mixin rectResp($width, $height, $minWidth, $minHeight, $R_max: $maxRespVP, $R_min: $minRespVP) {
    @include rect_resp($width, $height, $minWidth, $minHeight, $R_max, $R_min);
}
@mixin rectResp_768($width, $height, $minWidth, $minHeight, $R_max: $maxRespVP, $R_min: $minRespVP) {
    @include rect_resp($width, $height, $minWidth, $minHeight, $R_max, 768);
}
@mixin rectResp_480($width, $height, $minWidth, $minHeight, $R_max: $maxRespVP, $R_min: $minRespVP) {
    @include rect_resp($width, $height, $minWidth, $minHeight, $R_max, 480);
}
@mixin rectResp_320($width, $height, $minWidth, $minHeight, $R_max: $maxRespVP, $R_min: $minRespVP) {
    @include rect_resp($width, $height, $minWidth, $minHeight, $R_max, 320);
}
@mixin rect_resp($width, $height, $minWidth: 0, $minHeight: 0, $R_max: $maxRespVP, $R_min: $minRespVP) {
    $coef: calc($width / $height);
    @if($minWidth: 0){
        width: resp($width, calc($coef * $minHeight), $R_max, $R_min);
        height: resp($height, $minHeight, $R_max, $R_min);
    }
    @else if($minHeight: 0){
        width: resp($width, $minWidth, $R_min);
        height: resp(calc($width / $coef), $minHeight, $R_max, $R_min);
    } 
    @else {
        width: resp($width, $minWidth, $R_max, $R_min);
        height: resp($height, $minHeight, $R_max, $R_min);
    }
}

// ====/ Set first and last value on resolution range /========================================
@function fromTo($V_start, $V_fin, $R_max, $R_min) {
   $V_start_unit: 0;
   $V_fin_unit: 0;
    @if(string.index(#{$V_start}, "%") == null) {  // if px unit
        $V_start_unit: #{$V_start + px};
    }
    @else {  // if % unit
        $V_start: stringToNumber(string.slice(#{$V_start}, 0, -2));
        $V_start_unit: #{$V_start + px};
    }
    @if(string.index(#{$V_fin}, "%") == null) {  // if px unit
        $V_fin_unit: #{$V_fin + px};
    }
    @else {  // if % unit
        $V_fin: stringToNumber(string.slice(#{$V_fin}, 0, -2));
        $V_fin_unit: #{$V_fin + "%"};
    }
    $temp: ($V_start - $V_fin);
    $sign: "+";
    @if($temp < 0) {
        $temp: $temp * -1;
        $sign: "-";
    }
    $result: #{calc($V_fin_unit #{$sign} $temp * ((min(max(#{$R_min + px}, 100vw), #{$R_max + px}) - #{$R_min + px}) / #{($R_max - $R_min)}))};
    @return $result;
}

// @mixin universal($v1_start, $v1_fin, $r1_max, $r1_min, $v2_start, $v2_fin, $r2_max, $r2_min, $v3_start, $v3_fin, $r3_max, $r3_min, $v4_start, $v4_fin, $r4_max, $r4_min, $v5_start, $v5_fin, $r5_max, $r5_min) {
//     @media (min-width: ){

//     }
// }

// @mixin universal($v1_start, $v1_fin, $r1_max, $r1_min, $v2_start, $v2_fin, $r2_max, $r2_min) {

//     $min: 480px;
//     $max: 780px;
//     $screen: 100vw;
//     @debug "$min: "type-of($min);
//     @debug "$screen: "type-of($screen);
//     @debug "DD: " $min + $screen;
//     // @if(100vw > 480px and 100vw < 780px){
//         //     @debug "480-780";

//         // }
    
    
    
  
// }


    
//     // @else {
//     //     @debug "BUG";
//     // }
//     @return 10px;

//     }
// }

//     $V_start_unit: 0;
//     $V_fin_unit: 0;
//         @if(string.index(#{$V_start}, "%") == null) {  // if px unit
//             $V_start_unit: #{$V_start + px};
//         }
//         @else {  // if % unit
//             $V_start: stringToNumber(string.slice(#{$V_start}, 0, -2));
//             $V_start_unit: #{$V_start + px};
//         }
//         @if(string.index(#{$V_fin}, "%") == null) {  // if px unit
//             $V_fin_unit: #{$V_fin + px};
//         }
//         @else {  // if % unit
//             $V_fin: stringToNumber(string.slice(#{$V_fin}, 0, -2));
//             $V_fin_unit: #{$V_fin + "%"};
//         }
//         $temp: ($V_start - $V_fin);
//         $sign: "+";
//         @if($temp < 0) {
//             $temp: $temp * -1;
//             $sign: "-";
//         }
//         $result: #{calc($V_fin_unit #{$sign} $temp * ((min(max(#{$R_min + px}, 100vw), #{$R_max + px}) - #{$R_min + px}) / #{($R_max - $R_min)}))};
//         @return $result;
// }

// 
// ====/ R E S P O N S I V E /======================================================
// =================================================================================


// =================================================================================
// ====/ V W /======================================================================
// 
// ====/ Convert px to vw in context $maxRespVP /---------------------------
@function toVW($size) { 
    @return calc(($size / $maxRespVP) * 100) + vw;
}

// ====/ Adjust width and height respectively to width viewport (vw) /========================================
// ====/ $size -> $maxRespVP
// ====/    $x -> $vp

@function sizeVW_768($size) {
    $vp: min( max(100vw, 768px), $maxRespVP_px );
    @return calc( ($size * $vp) / $maxRespVP );
}
@function sizeVW_480($size) {
    $vp: min( max(100vw, 480px), $maxRespVP_px );
    @return calc( ($size * $vp) / $maxRespVP );
}
@function sizeVW_320($size) {
    $vp: min( max(100vw, 320px), $maxRespVP_px );
    @return calc( ($size * $vp) / $maxRespVP );
}
@function size_vw($size, $R_max: $maxRespVP,$R_min: $minRespVP) {
    $vp: min( max(100vw, #{$R_min + px}), #{$R_max + px} );
    @return calc( ($size * $vp) / $R_max );
}
// ====/ Set width and height respectively to vw
@mixin rectVWFromTo($width, $height, $R_max, $R_min) {
    width: sizeVW_768($width, $R_max, $R_min);
    height: sizeVW_768($height, $R_max, $R_min);
}
@mixin rectVW_768($width, $height) {
    width: sizeVW_768($width);
    height: sizeVW_768($height);
}
@mixin rectVW_480($width, $height) {
    width: sizeVW_480($width);
    height: sizeVW_480($height);
}
@mixin rectVW_320($width, $height) {
    width: sizeVW_320($width);
    height: sizeVW_320($height);
}
@mixin rect_vw($width, $height) {
    width: sizeVW($width);
    height: sizeVW($height);
}

// 
// ====/ V W /======================================================================
// =================================================================================


// =================================================================================
// ====/ U T I L I T E /======================================================================
// 
// ====/ Convert string to number /===============================================================
@function stringToNumber($value) {
    @if type-of($value) == 'number' {
      @return $value;
    } @else if type-of($value) != 'string' {
      $_: log('Value for `to-number` should be a number or a string.');
    }
    $result: 0;
    $digits: 0;
    $minus: str-slice($value, 1, 1) == '-';
    $numbers: ('0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9);
    @for $i from if($minus, 2, 1) through str-length($value) {
      $character: str-slice($value, $i, $i);
      @if not (index(map-keys($numbers), $character) or $character == '.') {
        @return to-length(if($minus, -$result, $result), str-slice($value, $i))
      }
      @if $character == '.' {
        $digits: 1; 
      } @else if $digits == 0 {
        $result: $result * 10 + map-get($numbers, $character);  
      } @else {
        $digits: $digits * 10;
        $result: $result + map-get($numbers, $character) / $digits;
      }
    }
    @return if($minus, -$result, $result);;
  }

  // 
  // ====/ U T I L I T E /======================================================================
// =================================================================================


// =================================================================================
// ====/ U N U S E D /======================================================================
// 
// ====/ Do same that resp but need to indicate property that changed /==========================================
@mixin propertyResp($property, $maxVar, $minVar, $R_min: $minRespVP) {
    #{$property}: resp($maxVar, $minVar, $R_min);
    // #{$property}: calc(#{$minVar + px} + ($maxVar - $minVar) * ((min(100vw, #{$maxRespVP + px}) - #{$minRespVP + px}) / ($maxRespVP - $minRespVP)));
}

// ====/ Set responsive side measure from $side to $minSide /============================
@mixin square($side, $minSide) {
    width: resp($side, $minSide, $R_min);
    height: resp($side, $minSide, $R_min);
}
// 
// ====/ U N U S E D /======================================================================
// =================================================================================







// WWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWwWWW
// OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM






// Set only font-size (do not set  line-height!) /===========================================================
// @mixin font($maxVar, $minVar, $dif: 0) {
//     $since: "+";
//     @if($dif < 0) {
//         $since: "-";
//         $dif: $dif * -1;
//     }
//     font-size: resp($maxVar, $minVar);
//     line-height: calc((#{$minVar + px} + ($maxVar - $minVar) * ((min(100vw, #{$maxRespVP + px}) - #{$minRespVP + px}) / ($maxRespVP - $minRespVP))) #{$since $dif + px});
// }








