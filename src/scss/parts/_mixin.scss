@use "sass:string";
@use "sass:math";

// calc(20px + (50 - 20) * ((100vw - 320px) / (1200 - 320)));

$minVP: 320; // Minimal resurrection
$minRespVP: 768; // Minimal resurrection for same item
$maxRespVP: 1920; // Model resurrection

// #region => R E S P O N S I V E /======================================================
    // 
    /// Set length in px from max to min value..
    /// @param {( px )} $_max - * started value (px)
    /// @param {( px )} $_min - * finished value (px)
    /// @param {( px )} $R_min - * viewport width for finished value (px)
    /// @param {( px )} $R_max [] -? viewport width for started value (default: $maxRespVP) (px)
    @function resp($maxVar, $minVar, $R_min: $minRespVP, $R_max: $maxRespVP) {
        @return calc(#{$minVar + px} + ($maxVar - $minVar) * ((min(max(#{$R_min + px}, 100vw), #{$R_max + px}) - #{$R_min + px}) / ($R_max - $R_min)));
    }
     // 
    /// Set height in px from max to min value..
    /// @param {( px )} $_max - * started value (px)
    /// @param {( px )} $_min - * finished value (px)
    /// @param {( px )} $R_min - * viewport height for finished value (px)
    /// @param {( px )} $R_max [] -? viewport height for started value (default: $maxRespVP) (px)
    @function respHeight($maxVar, $minVar, $R_min: $minRespVP, $R_max: $maxRespVP) {
        @return calc(#{$minVar + px} + ($maxVar - $minVar) * ((min(max(#{$R_min + px}, 100vh), #{$R_max + px}) - #{$R_min + px}) / ($R_max - $R_min)));
    }


    /// Set font and line-height..
    /// @param {( px )} $_max - * started value (px)
    /// @param {( px )} $_min - * finished value (px)
    /// @param {( px, % => "%" )} $_lh [0] - * line-height ()
    /// @param {( px )} $R_min - * viewport width for finished value (px)
    /// @param {( px )} $R_max [] -? viewport width for started value (default: $maxRespVP) (px)
    /// @output - set font (resp) and line-height (can be in percent);
    @mixin fontResp($_max, $_min, $_lh: 0, $R_min, $R_max: $maxRespVP) {
        $resp: resp($_max, $_min, $R_min, $R_max);
        font-size: $resp;
        @if($_lh !=0) {
            @if(string.index(#{$_lh}, "%")==null) {
                $coef: calc($_max / $_lh);
                line-height: calc($resp / $coef);
            }
            @else {
                $coef: calc(stringToNumber(string.slice(#{$_lh}, 0, -2)) / 100);
                line-height: calc($resp * $coef);
            }
        }
        @else {
            line-height: unset;
        }
    }

    // Could not be realize with percent argument
    // @function respPercent($_max, $_min, $R_min, $R_max: $maxRespVP) {
    //     @return calc($_min + ( ($_max - $_min) * ( (100vw - $R_max) / ($R_max - $R_min))));
    //     // @return calc($_max-)
    // }

    // ====/ Set responsive side to rectangle from: /=========================================================
    // ====/ $width -> $minWidth and $height -> $minHeight /===============================================
    /// 
    /// @param { px } $width * set model width;
    /// @param { px } $height * set model height;
    /// @param { px } $minWidth [0] - *? set min width (if not specified -> calc from height);
    /// @param { px } $minHeight [0] - *? set min height (if not specified -> calc from width);
    /// @param { px } $R_min [] - * set min view port width;
    /// @param { px } $R_max [] - ? set max view port width;
    /// @output - assign width and height based on responsive algorithm;
    @mixin rectResp($width, $height, $minWidth: 0, $minHeight: 0, $R_min: $minRespVP, $R_max: $maxRespVP) {
        $coef: calc($width / $height);
        @if($minWidth == 0) {
            width: resp($width, calc($coef * $minHeight), $R_min, $R_max);
            height: resp($height, $minHeight, $R_min, $R_max);
        }
        @else if($minHeight == 0) {
            width: resp($width, $minWidth, $R_min, $R_max);
            height: resp($height, calc($minWidth / $coef), $R_min, $R_max);
        }
        @else {
            width: resp($width, $minWidth, $R_min, $R_max);
            height: resp($height, $minHeight, $R_min, $R_max);
        }
    }


    /// @param { px } $_width * model width for $coef;
    /// @param { px } $_height * model height for $coef;
    /// @param { px } $width_start * specified starting value of width;
    /// @param { px } $width_fin * specified final value of width;
    /// @param { px } $R_min * specified minimal view width;
    /// @param { px } $R_max * specified maximal view width;
    /// @output { px } specified size rectangle basically at width (height - counted)
    @mixin rectWidthResp($_width, $_height, $width_start, $Width_fin, $R_min: $minRespVP, $R_max: $maxRespVP) {
        $coef: calc($_width / $_height);
        width: resp($width_start, $Width_fin, $R_min, $R_max);
        height: resp(calc($width_start / $coef), calc($Width_fin / $coef), $R_min, $R_max);
    }


    /// @param { px } $_width * model width for $coef;
    /// @param { px } $_height * model height for $coef;
    /// @param { px } $height_start * specified starting value of height;
    /// @param { px } $height_fin * specified final value of height;
    /// @param { px } $R_min * specified minimal view height;
    /// @param { px } $R_max * specified maximal view height;
    /// @output { px } specified size rectangle basically at height (width - counted)
    @mixin rectHeightResp($_width, $_height, $height_start, $height_fin, $R_min: $minRespVP, $R_max: $maxRespVP) {
        $coef: calc($_width / $_height);
        width: resp(calc($height_start * $coef), calc($height_fin * $coef), $R_min, $R_max);
        height: resp($height_start, $height_fin, $R_min, $R_max);
    }
// #endregion =================================================================================

// #region => V W /======================================================================

    //====/ vwMedia /==============================================================
    // @function vwMedia($max_1, $min_1, $vp_min_1, $vp_max_1: $maxRespVP)
    @function vwMedia($max_1, $min_1, $vp_min_1, $max_2: 0, $min_2: 0, $vp_min_2: 0, $max_3: 0, $min_3: 0, $vp_min_3: 0, $max_4: 0, $min_4: 0, $vp_min_4: 0 ) {
        //  media(480){

        // }
        @return min(#{$size + px}, max(#{calc(($size / $max) * 100) + vw}, #{calc($size * $lim / $max) + px}));

    }


    //====/ toVW /==========================================================
    /// @param { px } $size * size to convert;
    /// @param { px } $lim *?(0) bottom limit view port width;
    /// @param { px } $max *? ($maxRespVP) max view port width;
    /// @return { vw } - converted value with to a value at limit view port width
    @function toVW($size, $lim: 0, $max: $maxRespVP) {
        // @return min(#{$size + px}, #{calc(($size / $maxRespVP) * 100) + vw});
        @return min(#{$size + px}, max(#{calc(($size / $max) * 100) + vw}, #{calc($size * $lim / $max) + px}));

    }

    //====/ toVWSizeLimit /==========================================================
    /// @param { px } $size * size to convert;
    /// @param { px } $lim - * down border size
    /// @return { vw } - converted value
    @function toVWSizeLimit($size, $lim) {
        @return min(#{$size + px}, max(#{calc(($size / $maxRespVP) * 100) + vw}, #{$lim + px}));
    }

    //====/ rectVW /==========================================================
    /// @param { px } $width * width of rectangle;
    /// @param { px } $height * height of rectangle;
    /// @param { px } $R_min * down border media view port;
    /// @param { px } $R_max [] - ? top border media view port
    /// @output width and height converted in vw;
    @mixin rectVW($width, $height, $R_min, $R_max: $maxRespVP) {
        width: toVW($width, $R_min, $R_max);
        height: toVW($height, $R_min, $R_max);
    }

    //====/ fontVW /==========================================================
    /// @param { px } $_fs * set font-size;
    /// @param { px, %} $_lh * set line-height;
    /// @param { px } $_min * set min view port width;  
    /// @output - set font-size (px) and line-height (px, %) responsively
    @mixin fontVW($_fs, $_lh, $_min) {
        font-size: toVW($_fs, $_min);
        @if($_lh != 0) {
            @if(string.index(#{$_lh}, "%") == null) {
                line-height: toVW($_lh, $_min);
            }

            @else {
                line-height: $_lh;
            }
        }

        @else {
            line-height: unset;
        }
    }

    ///  Convert px to vw relatively $maxRespVP with stopped on $lim view port width
    // /// @param { px } $size * size to convert;
    // /// @param { px } $lim * bottom limit view port width;
    // /// @return { vw } - converted value
    // @function toVW($size, $lim) {
    //     @return min(#{$size + px}, max(#{calc(($size / $maxRespVP) * 100) + vw}, #{calc($size * $lim / $maxRespVP) + px}));
    // }

    ///  
    // ====/ $size -> $maxRespVP
    // ====/    $x -> $vp
    // @function sizeVW($size, $R_min: $minRespVP, $R_max: $maxRespVP) {
    //     $vp: min(max(100vw, #{$R_min + px}), #{$R_max + px});
    //     @return calc(($size * $vp) / $R_max );
    // }

    // @function respVW($_max, $_min, $R_min: $minVP, $R_max: $maxRespVP) {
    //     calc()

    // }



    // @mixin fontResp($_max, $_min, $_lh: 0, $R_min, $R_max: $maxRespVP) {
        // $resp: resp($_max, $_min, $R_min, $R_max);
    /// 

    // 
// ====/ V W /======================================================================
// #endregion /=================================================================================

// #region P E R C E N T ( % ) /==================================================================
    /// @param { px } $width * template width;
    /// @param { px } $height * template height;
    /// @param { % / vw } $now_width */? width to calculate;
    /// @param { % / vw } $now_height */? height to calculate;
    @mixin rectRespInPercent($width, $height, $now_width: 0, $now_height) {
        $coef: calc($width / $height);
        @if($now_width == 0 and $now_height != 0) {
            width: $coef * $height;
            height: $now_height;
        } @else if( $now_width != 0 and $now_height == 0) {
            width: $now_width;
            height: calc($now_width / $coef);
        } @else if( $now_width == 0 and $now_height == 0) {
            @error("All specified value setting by '0'. Need at least one 'in percent' value setting");
        }
    }
// #endregion


// #region => U T I L I T E /======================================================================
// 
// ====/ Convert string to number /===============================================================
@function stringToNumber($value) {
    @if type-of($value)=='number' {
        @return $value;
    }

    @else if type-of($value) !='string' {
        $_: log('Value for `to-number` should be a number or a string.');
    }

    $result: 0;
    $digits: 0;
    $minus: str-slice($value, 1, 1)=='-';
    $numbers: (
        '0': 0,
        '1': 1,
        '2': 2,
        '3': 3,
        '4': 4,
        '5': 5,
        '6': 6,
        '7': 7,
        '8': 8,
        '9': 9
    );

@for $i from if($minus, 2, 1) through str-length($value) {
    $character: str-slice($value, $i, $i);

    @if not (index(map-keys($numbers), $character) or $character =='.') {
        @return to-length(if($minus, -$result, $result), str-slice($value, $i))
    }

    @if $character =='.' {
        $digits: 1;
    }

    @else if $digits ==0 {
        $result: $result * 10+map-get($numbers, $character);
    }

    @else {
        $digits: $digits * 10;
        $result: $result + map-get($numbers, $character) / $digits;
    }
}

@return if($minus, -$result, $result);
;
}

// 
// #endregion /====/ U T I L I T E /======================================================================

// #region => M E D I A /======================================================================
    /// 
    /// @param {( px )} $top - * set max-width
    /// @param {( px ))} $bottom [0] - ? set min-width
    /// @output - set media request
    @mixin media($top, $bottom: 0) {
        @if($bottom > 320) {
            @media (max-width: #{$top + px}) {
                @media (min-width: #{$bottom + px}) {
                    @content;
                }
            }
        }
        @else {
            @media (max-width: #{$top + px}) {
                @content;
            }
        }
    }

    /// 
    /// @param {( px )} $top - * set max-height
    /// @param {( px ))} $bottom [0] - ? set min-height
    /// @output - set media request
    @mixin heightMedia($top, $bottom: 0) {
        @if($bottom > 320) {
            @media (max-height: #{$top + px}) {
                @media (min-height: #{$bottom + px}) {
                    @content;
                }
            }
        }
        @else {
            @media (max-height: #{$top + px}) {
                @content;
            }
        }
    }

    ///
    /// @param {(px)} $min_width = * set min width for apply inner cintent
    /// @output - apply content if width bigger then $min_width;
    @mixin minWidthMedia($min_width) {
        @media(min-width: #{$min_width + px}) {
            @content;
        }
    }

//
// #endregion /====/ M E D I A /======================================================================

// #region => P I E C E S /======================================================================
//
@mixin marginHorizontal($_top: none, $_bottom: none){
    margin-left: auto;
    margin-right: auto;
    @if ($_top != none) {
        margin-top: $_top;
    }
    @if($_bottom != none) {
        margin-bottom: $_bottom;
    }
}
// 
// #endregion => P I E C E S \======================================================================


// #region => U N U S E D /======================================================================
// 
// ====/ Do same that resp but need to indicate property that changed /==========================================
@mixin propertyResp($property, $maxVar, $minVar, $R_min: $minRespVP) {
    #{$property}: resp($maxVar, $minVar, $R_min);
    // #{$property}: calc(#{$minVar + px} + ($maxVar - $minVar) * ((min(100vw, #{$maxRespVP + px}) - #{$minRespVP + px}) / ($maxRespVP - $minRespVP)));
}

// ====/ Set responsive side measure from $side to $minSide /============================
@mixin square($side, $minSide) {
    width: resp($side, $minSide, $R_min);
    height: resp($side, $minSide, $R_min);
}

// 
// #endregion => U N U S E D \======================================================================